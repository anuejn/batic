{"dependencies":[{"name":"/home/nein/projects/apertus/batic/.babelrc","includedInParent":true,"mtime":1518452784657},{"name":"react","loc":{"line":111,"column":18}},{"name":"react-dom","loc":{"line":112,"column":21}},{"name":"./index.css","loc":{"line":113,"column":7}}],"generated":{"js":"/**\n * @file\n * the main entrypoint for the gui. glues everything together.\n */\n\"use strict\";\n\n/*\nconst shader_preprocessor = require('./shader_preprocessor');\n\nconst panzoom = require('../lib/panzoom/panzoom.min.js');\nconst ace = require('../lib/ace/lib/ace/ace');\n\n\nconst initialModel = {\n    globalError: null,\n\n    fragment_shader: null,\n    compiler_errors: '',\n\n    inputs: {},\n};\n\nasync function update(model, e) {\n    if(e === 'initial') {\n        return 'load_shader';\n    } else if (e === 'load_shader') {\n        model.fragment_shader = await loaders.loadText(\"examples/shaders/black_white.glsl\");\n        return 'load_resources';\n    } else if (e === 'load_resources') {\n        model.inputs['raw_image'] = await loaders.loadRaw16(\"examples/images/human.raw16\");\n    } else if (typeof e === error) {\n        model.globalError = e.me\n    }\n}\n\nasync function view(model) {\n    if(!model.fragment_shader) {\n        return `\n            <div id=\"loading\">\n                LOADING SHADER...\n            </div>\n        `;\n    } else if (Object.keys(shader_preprocessor.getRequiredInputs(model.fragment_shader)).filter(x => !model.inputs[x]).length > 0) {\n        return `\n            <div id=\"loading\">\n                LOADING RESOURCES...\n            </div>\n        `;\n    } else {\n        return `\n            <main>\n                <canvas id=\"canvas\"></canvas>\n            </main>\n        \n            <aside>\n                <h1>### BATIC </h1>\n                <a href=\"https://github.com/anuejn/batic\" target=\"_blank\" style=\"position: absolute; right: 20px; top: 40px;\">(WHATS THIS?!)</a>\n        \n                <div id=\"controls\">\n                    ${generateControls(model.fragment_shader)}\n                </div>\n                <div id=\"code\"></div>\n                <pre id=\"errors\">\n                    ${model.compiler_errors}\n                </pre>\n            </aside>\n        `;\n    }\n}\n\nfunction generateControls(fragment_shader) {\n    const needed_inputs = shader_preprocessor.getRequiredInputs(fragment_shader);\n    return Object.keys(needed_inputs).map(name => {\n        try {\n            let input = inputs.filter(i => i.type.indexOf(needed_inputs[name]) !== -1)[0];\n            console.log(input.render(name));\n            return input.render(name);\n        } catch (e) {\n            return `<div class=\"error\">no input for uniform ${name} with type ${needed_inputs[name]}`\n        }\n    }).reduce((a, b) => a + b);\n}\n\nasync function lower(rendered) {\n    const container = document.querySelector(\"body\");\n    if(rendered !== container.innerHTML) {\n        // set the html\n        container.innerHTML = rendered;\n\n\n        // setup the code editor\n        window.code = ace.edit(\"code\");\n        window.code.session.setMode(\"ace/mode/glsl\");\n        ace.require(\"ace/ext/language_tools\");\n        window.code.setOptions({\n            enableBasicAutocompletion: true,\n            enableSnippets: true,\n            enableLiveAutocompletion: true\n        });\n\n        // setup panzoom\n        let scene = document.getElementById(\"canvas\");\n        panzoom(scene, {\n            smoothScroll: true\n        })\n\n    }\n}\n*/\n\nvar _jsxFileName = '/home/nein/projects/apertus/batic/src/index.js',\n    _this = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nrequire('./index.css');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar App = function App() {\n    return _react2.default.createElement(\n        'div',\n        { className: 'App', __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n            },\n            __self: _this\n        },\n        _react2.default.createElement(\n            'h1',\n            { className: 'App-Title', __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 117\n                },\n                __self: _this\n            },\n            'Hello Parcel x React'\n        )\n    );\n};\n\nwindow.addEventListener('load', function () {\n    _reactDom2.default.render(_react2.default.createElement(App, {\n        __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n        },\n        __self: _this\n    }), document.getElementById('react'));\n});","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"src/index.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":0},"source":"src/index.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"src/index.js","original":{"line":7,"column":0}},{"generated":{"line":114,"column":0},"source":"src/index.js","original":{"line":111,"column":0}},{"generated":{"line":118,"column":0},"source":"src/index.js","original":{"line":112,"column":0}},{"generated":{"line":122,"column":0},"source":"src/index.js","original":{"line":113,"column":0}},{"generated":{"line":126,"column":0},"source":"src/index.js","original":{"line":115,"column":0}},{"name":"App","generated":{"line":126,"column":4},"source":"src/index.js","original":{"line":115,"column":6}},{"generated":{"line":126,"column":10},"source":"src/index.js","original":{"line":115,"column":12}},{"name":"App","generated":{"line":126,"column":19},"source":"src/index.js","original":{"line":115,"column":6}},{"generated":{"line":126,"column":22},"source":"src/index.js","original":{"line":115,"column":12}},{"generated":{"line":127,"column":0},"source":"src/index.js","original":{"line":115,"column":12}},{"generated":{"line":127,"column":11},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":128,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":129,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":129,"column":10},"source":"src/index.js","original":{"line":116,"column":9}},{"generated":{"line":129,"column":21},"source":"src/index.js","original":{"line":116,"column":19}},{"generated":{"line":129,"column":26},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":130,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":131,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":132,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":133,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":134,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":135,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":136,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":137,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":137,"column":14},"source":"src/index.js","original":{"line":117,"column":12}},{"generated":{"line":137,"column":25},"source":"src/index.js","original":{"line":117,"column":22}},{"generated":{"line":137,"column":36},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":138,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":139,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":140,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":141,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":142,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":143,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":144,"column":0},"source":"src/index.js","original":{"line":117,"column":8}},{"generated":{"line":145,"column":0},"source":"src/index.js","original":{"line":116,"column":4}},{"generated":{"line":145,"column":5},"source":"src/index.js","original":{"line":115,"column":12}},{"generated":{"line":146,"column":0},"source":"src/index.js","original":{"line":115,"column":12}},{"generated":{"line":146,"column":1},"source":"src/index.js","original":{"line":115,"column":0}},{"name":"window","generated":{"line":148,"column":0},"source":"src/index.js","original":{"line":122,"column":0}},{"name":"addEventListener","generated":{"line":148,"column":7},"source":"src/index.js","original":{"line":122,"column":7}},{"generated":{"line":148,"column":23},"source":"src/index.js","original":{"line":122,"column":0}},{"generated":{"line":148,"column":24},"source":"src/index.js","original":{"line":122,"column":24}},{"generated":{"line":148,"column":30},"source":"src/index.js","original":{"line":122,"column":0}},{"generated":{"line":148,"column":32},"source":"src/index.js","original":{"line":122,"column":32}},{"generated":{"line":148,"column":44},"source":"src/index.js","original":{"line":122,"column":38}},{"generated":{"line":149,"column":0},"source":"src/index.js","original":{"line":123,"column":4}},{"name":"render","generated":{"line":149,"column":23},"source":"src/index.js","original":{"line":123,"column":13}},{"generated":{"line":149,"column":29},"source":"src/index.js","original":{"line":123,"column":4}},{"generated":{"line":149,"column":30},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":149,"column":60},"source":"src/index.js","original":{"line":123,"column":21}},{"generated":{"line":149,"column":63},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":150,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":151,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":152,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":153,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":154,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":155,"column":0},"source":"src/index.js","original":{"line":123,"column":20}},{"generated":{"line":155,"column":6},"source":"src/index.js","original":{"line":123,"column":4}},{"name":"document","generated":{"line":155,"column":8},"source":"src/index.js","original":{"line":123,"column":29}},{"name":"getElementById","generated":{"line":155,"column":17},"source":"src/index.js","original":{"line":123,"column":38}},{"generated":{"line":155,"column":31},"source":"src/index.js","original":{"line":123,"column":29}},{"generated":{"line":155,"column":32},"source":"src/index.js","original":{"line":123,"column":53}},{"generated":{"line":155,"column":39},"source":"src/index.js","original":{"line":123,"column":29}},{"generated":{"line":155,"column":40},"source":"src/index.js","original":{"line":123,"column":4}},{"generated":{"line":156,"column":0},"source":"src/index.js","original":{"line":124,"column":1}},{"generated":{"line":156,"column":1},"source":"src/index.js","original":{"line":122,"column":0}}],"sources":{"src/index.js":"/**\n * @file\n * the main entrypoint for the gui. glues everything together.\n */\n\"use strict\";\n\n/*\nconst shader_preprocessor = require('./shader_preprocessor');\n\nconst panzoom = require('../lib/panzoom/panzoom.min.js');\nconst ace = require('../lib/ace/lib/ace/ace');\n\n\nconst initialModel = {\n    globalError: null,\n\n    fragment_shader: null,\n    compiler_errors: '',\n\n    inputs: {},\n};\n\nasync function update(model, e) {\n    if(e === 'initial') {\n        return 'load_shader';\n    } else if (e === 'load_shader') {\n        model.fragment_shader = await loaders.loadText(\"examples/shaders/black_white.glsl\");\n        return 'load_resources';\n    } else if (e === 'load_resources') {\n        model.inputs['raw_image'] = await loaders.loadRaw16(\"examples/images/human.raw16\");\n    } else if (typeof e === error) {\n        model.globalError = e.me\n    }\n}\n\nasync function view(model) {\n    if(!model.fragment_shader) {\n        return `\n            <div id=\"loading\">\n                LOADING SHADER...\n            </div>\n        `;\n    } else if (Object.keys(shader_preprocessor.getRequiredInputs(model.fragment_shader)).filter(x => !model.inputs[x]).length > 0) {\n        return `\n            <div id=\"loading\">\n                LOADING RESOURCES...\n            </div>\n        `;\n    } else {\n        return `\n            <main>\n                <canvas id=\"canvas\"></canvas>\n            </main>\n        \n            <aside>\n                <h1>### BATIC </h1>\n                <a href=\"https://github.com/anuejn/batic\" target=\"_blank\" style=\"position: absolute; right: 20px; top: 40px;\">(WHATS THIS?!)</a>\n        \n                <div id=\"controls\">\n                    ${generateControls(model.fragment_shader)}\n                </div>\n                <div id=\"code\"></div>\n                <pre id=\"errors\">\n                    ${model.compiler_errors}\n                </pre>\n            </aside>\n        `;\n    }\n}\n\nfunction generateControls(fragment_shader) {\n    const needed_inputs = shader_preprocessor.getRequiredInputs(fragment_shader);\n    return Object.keys(needed_inputs).map(name => {\n        try {\n            let input = inputs.filter(i => i.type.indexOf(needed_inputs[name]) !== -1)[0];\n            console.log(input.render(name));\n            return input.render(name);\n        } catch (e) {\n            return `<div class=\"error\">no input for uniform ${name} with type ${needed_inputs[name]}`\n        }\n    }).reduce((a, b) => a + b);\n}\n\nasync function lower(rendered) {\n    const container = document.querySelector(\"body\");\n    if(rendered !== container.innerHTML) {\n        // set the html\n        container.innerHTML = rendered;\n\n\n        // setup the code editor\n        window.code = ace.edit(\"code\");\n        window.code.session.setMode(\"ace/mode/glsl\");\n        ace.require(\"ace/ext/language_tools\");\n        window.code.setOptions({\n            enableBasicAutocompletion: true,\n            enableSnippets: true,\n            enableLiveAutocompletion: true\n        });\n\n        // setup panzoom\n        let scene = document.getElementById(\"canvas\");\n        panzoom(scene, {\n            smoothScroll: true\n        })\n\n    }\n}\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst App = () => (\n    <div className=\"App\">\n        <h1 className=\"App-Title\">Hello Parcel x React</h1>\n    </div>\n);\n\n\nwindow.addEventListener('load', () => {\n    ReactDOM.render(<App />, document.getElementById('react'));\n});\n"},"lineCount":null}},"hash":"d0a495eac4d0d043d5b6f9fd72f8960f","cacheData":{"env":{}}}